diff --git a/node_modules/adb-ts/lib/util/functions.d.ts b/node_modules/adb-ts/lib/util/functions.d.ts
index d705678..7b0e022 100644
--- a/node_modules/adb-ts/lib/util/functions.d.ts
+++ b/node_modules/adb-ts/lib/util/functions.d.ts
@@ -10,3 +10,4 @@ export declare function findMatches(value: string, regExp: RegExp, parseTo: 'map
 export declare function findMatches(value: string, regExp: RegExp): string[][];
 export declare function escape(arg: PrimitiveType): string;
 export declare function escapeCompat(arg: PrimitiveType): string;
+export declare function isValidDate(dateString: string): boolean;
diff --git a/node_modules/adb-ts/lib/util/functions.js b/node_modules/adb-ts/lib/util/functions.js
index 5a3820a..075a82b 100644
--- a/node_modules/adb-ts/lib/util/functions.js
+++ b/node_modules/adb-ts/lib/util/functions.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.escapeCompat = exports.escape = exports.findMatches = exports.parsePrimitiveParam = exports.stringToType = exports.encodeData = exports.encodeLength = exports.decodeLength = void 0;
+exports.isValidDate = exports.escapeCompat = exports.escape = exports.findMatches = exports.parsePrimitiveParam = exports.stringToType = exports.encodeData = exports.encodeLength = exports.decodeLength = void 0;
 const decodeLength = (length) => {
     return parseInt(length, 16);
 };
@@ -26,9 +26,8 @@ const stringToType = (value) => {
         return parsed;
     }
     catch {
-        const date = new Date(value);
-        if (!isNaN(date.getMilliseconds())) {
-            return date;
+        if (isValidDate(value)) {
+            return new Date(value);
         }
         return value || undefined;
     }
@@ -79,3 +78,34 @@ function escapeCompat(arg) {
     }
 }
 exports.escapeCompat = escapeCompat;
+function isValidDate(dateString) {
+    // Basic date format regular expressions
+    const dateRegex = {
+        // ISO date: 2024-03-21, 2024-03-21T10:30:00.000Z
+        iso: /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{1,3})?Z?)?$/,
+        // US date format: MM/DD/YYYY
+        us: /^\d{1,2}\/\d{1,2}\/\d{4}$/,
+        // European date format: DD.MM.YYYY or DD-MM-YYYY
+        eu: /^(\d{1,2})[.-]\d{1,2}[.-]\d{4}$/,
+        // Unix 时间戳 (秒或毫秒)
+        timestamp: /^\d{10,13}$/
+    };
+    // Check if string matches any date format
+    const isDateFormat = Object.values(dateRegex).some(regex => regex.test(dateString));
+    if (!isDateFormat)
+        return false;
+    // For timestamp format, first convert to number
+    if (dateRegex.timestamp.test(dateString)) {
+        const timestamp = parseInt(dateString);
+        // If timestamp is in seconds, convert to milliseconds
+        const milliseconds = timestamp < 10000000000 ? timestamp * 1000 : timestamp;
+        return !isNaN(new Date(milliseconds).getTime());
+    }
+    // Create and validate date object
+    const date = new Date(dateString);
+    // Check if date is valid
+    if (isNaN(date.getTime()))
+        return false;
+    return true;
+}
+exports.isValidDate = isValidDate;
